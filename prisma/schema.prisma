generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id            String   @id @default(cuid())
  masterRoomId  String   @unique
  teamAId       String   @unique
  teamBId       String   @unique
  teamALink     String
  teamBLink     String
  spectatorLink String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  maps          String[]
  roundType     String
  teamAReady    Boolean  @default(false)
  teamBReady    Boolean  @default(false)
  status        String   @default("waiting")
  teamAName     String?
  teamBName     String?
  currentTurn   String?
  vetoCompleted Boolean  @default(false)
  vetoStarted   Boolean  @default(false)
  vetoState     Json?
  customVetoSequence Json? // Custom veto sequence set during room creation

  @@index([masterRoomId])
  @@index([teamAId])
  @@index([teamBId])
  @@index([expiresAt])
}
